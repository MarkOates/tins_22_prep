parent_classes:


  - class: AllegroFlare::Screens::Base
    scope: public
    init_with: '"Runner"'


properties:


  - name: framework
    type: AllegroFlare::Frameworks::Full*
    init_with: nullptr
    constructor_arg: true

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    constructor_arg: true


functions:


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ ev, event_emitter ]
    body: |
      std::string event_name = ev->get_type();

      if (event_name == "initialize")
      {
         event_emitter->emit_game_event(AllegroFlare::GameEvent("start_opening_logos_storyboard_screen"));
      }
      if (event_name == "start_opening_logos_storyboard_screen")
      {
         framework->activate_screen("opening_logos_storyboard_screen");
      }
      if (event_name == "start_title_screen")
      {
         framework->activate_screen("title_screen");
         event_emitter->emit_play_music_track_event("file_example_OOG_1MG.ogg");
      }
      if (event_name == "start_credits_screen")
      {
         framework->activate_screen("credits_screen");
      }
      if (event_name == "start_gameplay_screen")
      {
         framework->activate_screen("gameplay_screen");
      }
      //if (event_name == "start_new_game")
      //{
         //framework->activate_screen("opening_storyboard_screen");
      //}
      if (event_name == "finished_credits_screen")
      {
         framework->activate_screen("title_screen");
      }
      if (event_name == "exit_game")
      {
         event_emitter->emit_exit_game_event();
      }
      if (event_name == "pause_game")
      {
         framework->activate_screen("pause_screen");
      }
      if (event_name == "unpause_game")
      {
         framework->activate_screen("gameplay_screen");
      }
      return;


  - name: run
    parameters:
      - name: mode
        type: std::string
        default_argument: '"production"'
    static: true
    body: |
      // setup the framework
      AllegroFlare::Frameworks::Full framework;
      framework.disable_escape_key_will_shutdown();
      framework.initialize();

      // setup the bin paths
      AllegroFlare::FontBin &font_bin = framework.get_font_bin_ref();
      AllegroFlare::BitmapBin &bitmap_bin = framework.get_bitmap_bin_ref();
      AllegroFlare::SampleBin &sample_bin = framework.get_sample_bin_ref();
      AllegroFlare::ModelBin &model_bin = framework.get_model_bin_ref();
      AllegroFlare::EventEmitter &event_emitter = framework.get_event_emitter_ref();
      AllegroFlare::AudioController &audio_controller = framework.get_audio_controller_ref();

      if (mode == "test")
      {
         font_bin.set_full_path("/Users/markoates/Repos/tins_22_prep/bin/programs/data/fonts");
         bitmap_bin.set_full_path("/Users/markoates/Repos/tins_22_prep/bin/programs/data/bitmaps");
         sample_bin.set_full_path("/Users/markoates/Repos/tins_22_prep/bin/programs/data/samples");
         model_bin.set_full_path("/Users/markoates/Repos/tins_22_prep/bin/programs/data/models");
      }



      // setup this instance of the runner screen
      Runner runner(&framework, &framework.get_event_emitter_ref());
      framework.register_screen("runner", &runner);

      AllegroFlare::StoryboardFactory storyboard_factory(&font_bin, &framework.get_event_emitter_ref());



      // Setup the opening logo storyboards
      AllegroFlare::Screens::Storyboard *opening_logos_storyboard_screen =
         storyboard_factory.create_images_storyboard_screen({
            bitmap_bin["allegro5-logo-gray.png"],
            bitmap_bin["allegro-flare-alt-logo-01.png"],
            bitmap_bin["tinslogo06.gif"],
         });
      opening_logos_storyboard_screen->set_game_event_name_to_emit_after_completing("start_title_screen");
      framework.register_screen("opening_logos_storyboard_screen", opening_logos_storyboard_screen);



      // pre-load the audio controller
      audio_controller.set_and_load_sound_effect_elements({
        { "menu-click-01.wav", { "menu-click-01.wav", false } },
      });
      audio_controller.set_and_load_music_track_elements({
        //{ "file_example_OOG_1MG.ogg", { "file_example_OOG_1MG.ogg", true } },
      });



      // setup the title screen
      AllegroFlare::Screens::TitleScreen title_screen;
      title_screen.set_font_bin(&framework.get_font_bin_ref());
      title_screen.set_bitmap_bin(&framework.get_bitmap_bin_ref());
      title_screen.set_title_text("");
      //title_screen.set_title_bitmap_name("tins4-logo-01.png");
      title_screen.set_background_bitmap_name("logo-02.png");
      title_screen.set_event_emitter(&framework.get_event_emitter_ref());
      title_screen.set_font_name("Inter-Medium.ttf");
      title_screen.set_menu_font_size(-40);
      title_screen.set_menu_position_y(1080/32*19);
      title_screen.set_copyright_text("Copyright 2022 - Mark Oates\nCLUBCATT Games - www.clubcatt.com\n");
      title_screen.set_copyright_text_color(AllegroFlare::Color(AllegroFlare::Color::LightSkyBlue, 0.4).to_al());
      title_screen.set_copyright_font_size(-26);
      title_screen.set_menu_options({
         { "Start New Game", "start_gameplay_screen" },
         { "Credits", "start_credits_screen" },
         { "Quit", "exit_game" },
      });
      framework.register_screen("title_screen", &title_screen);



      // setup the pause screen
      AllegroFlare::Screens::PauseScreen pause_screen;
      pause_screen.set_font_bin(&framework.get_font_bin_ref());
      pause_screen.set_bitmap_bin(&framework.get_bitmap_bin_ref());
      pause_screen.set_event_emitter(&framework.get_event_emitter_ref());
      pause_screen.set_menu_options({
         { "Resume", "unpause_game" },
         { "Quit", "start_title_screen" },
      });
      framework.register_screen("pause_screen", &pause_screen);



      // setup the gameplay screen
      AllegroFlare::Prototypes::FixedRoom2D::Screen gameplay_screen(
         &bitmap_bin,
         &font_bin,
         &event_emitter,
         &audio_controller
      );
      //gameplay_screen.set_bitmap_bin(&bitmap_bin);
      gameplay_screen.initialize();
      framework.register_screen("gameplay_screen", &gameplay_screen);
      // TODO
 


      // setup the credits screen
      AllegroFlare::Screens::Storyboard *credits_screen = storyboard_factory.create_advancing_text_storyboard_screen({
            "Thank you to amarillion for running TINS.",
            "Thanks to all the members of allegro.cc for their participation in the community, "
               "which had a huge impact in my development as a programmer.",
            "Thank you to Elias and SiegeLord for their continued dedication to Allegro.",
            "Thank you to Matthew Leverton for creating allegro.cc",
            "Thank you to Shawn Hargreaves for creating the first version of Allegro in the 90s.",
            "And thank you for playing.",
         });
      credits_screen->set_event_emitter(&framework.get_event_emitter_ref());
      credits_screen->set_game_event_name_to_emit_after_completing("finished_credits_screen");
      framework.register_screen("credits_screen", credits_screen);



      framework.run_loop();


      //framework.unregister_screen(&storyboard_player_screen);


      return;
    body_dependency_symbols:
      - AllegroFlare::Frameworks::Full*
      - AllegroFlare::Screens::TitleScreen
      - AllegroFlare::Screens::PauseScreen
      - AllegroFlare::Screens::GameWonScreen
      - AllegroFlare::Screens::Storyboard
      - AllegroFlare::StoryboardFactory
      - AllegroFlare::Prototypes::FixedRoom2D::Screen
      - AllegroFlare::Color


dependencies:


  - symbol: AllegroFlare::Screens::Base
    headers: [ AllegroFlare/Screens/Base.hpp ]
  - symbol: AllegroFlare::Frameworks::Full*
    headers: [ AllegroFlare/Frameworks/Full.hpp ]
  - symbol: AllegroFlare::Screens::TitleScreen
    headers: [ AllegroFlare/Screens/TitleScreen.hpp ]
  - symbol: AllegroFlare::Screens::PauseScreen
    headers: [ AllegroFlare/Screens/PauseScreen.hpp ]
  - symbol: AllegroFlare::Screens::Storyboard
    headers: [ AllegroFlare/Screens/Storyboard.hpp ]
  - symbol: AllegroFlare::StoryboardFactory
    headers: [ AllegroFlare/StoryboardFactory.hpp ]
  - symbol: AllegroFlare::Screens::GameWonScreen
    headers: [ AllegroFlare/Screens/GameWonScreen.hpp ]
  - symbol: AllegroFlare::Prototypes::FixedRoom2D::Screen
    headers: [ AllegroFlare/Prototypes/FixedRoom2D/Screen.hpp ]
  - symbol: AllegroFlare::EventEmitter*
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::Color
    headers: [ AllegroFlare/Color.hpp ]
  - symbol: AllegroFlare::GameEvent*
    headers: [ AllegroFlare/GameEvent.hpp ]


